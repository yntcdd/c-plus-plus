#include <iostream>
#include <raylib.h>
#include <stdlib.h>
#include <cmath>
#include <vector>

// nodemon --exec g++ ./main.cpp -lraylib -o bs
// nodemon --exec ./bs --watch ./bs -d 0.1
// valgrind --leak-check=yes ./bs 1>info.txt 2>err.txt


int screenHeight = 1080;
int screenWidth = 1920;


using namespace std;
bool gameStarted = true;
Rectangle mouse = { 0, 0, 1, 1};
int frame = 0;
int tileSize = 50;
int screenSize = 60;

int CollisionWithMouse(float mx, float my, float x, float y, float w, float h) {
    if (mx >= x && mx <= x + w && my >= y && my <= y + h) {
        return 1;
    }
    return 0;
}
int distance(float x, float y, float x2, float y2) {
    return sqrt(pow(x - x2, 2) + pow(y - y2, 2));
}

bool outOfScreen = false;
Vector2 player = { 10, 10};
Vector2 oldplayer = { 10, 10};
Vector2 realplayer = {960, 540};

std::vector<std::vector<int>> grid = {
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 4, 4, 4, 0, 2, 2, 2, 2, 2, 6, 4, 4, 4, 4, 4, 6, 2, 2, 2, 2, 2, 6, 2, 0, 4, 4, 4, 4, 0, 0, 2, 2, 4, 4, 4, 4, 4, 2, 2, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 0, 0, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2, 2, 2, 0, 4, 4, 4, 4, 0, 2, 2, 2, 2, 4, 4, 4, 2, 2, 0, 4, 4, 4, 4, 0, 2, 2, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 0, 2, 2, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,},
    {0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,},
    {2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
    {2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0,},
    {2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 1, 0, 0, 0, 0,},
    {2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 6, 0, 0, 0, 6, 6, 0, 0, 0, 7, 0, 2, 2, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 1, 0, 0, 0, 0,},
    {2, 2, 2, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 0, 6, 6, 6, 0, 0, 6, 6, 6, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 1, 0, 0, 0, 0,},
    {2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 6, 0, 0, 6, 6, 6, 0, 0, 0, 0, 6, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0,},
    {2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 1, 0, 0, 6, 0, 0, 7, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,},
    {2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 1, 1, 0, 0, 0, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,},
    {2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 4, 4, 4, 4, 4, 4, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 6, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,},
    {2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 4, 4, 4, 4, 4, 4, 4, 6, 0, 0, 0, 0, 0, 0, 9, 8, 9, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,},
    {2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 2, 1, 2, 2, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,},
    {2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2,},
    {2, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2,},
    {2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2,},
    {0, 0, 0, 0, 1, 1, 1, 0, 2, 0, 7, 0, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,},
    {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 6, 0, 0, 0, 9, 8, 9, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 2, 2, 2,},
    {0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 7, 0, 0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
    {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
    {0, 0, 0, 0, 6, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 1, 7, 7, 1, 2, 2, 2, 2, 2, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
    {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 9, 8, 9, 0, 0, 0, 1, 1, 2, 2, 2, 7, 0, 0, 7, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2,},
    {0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 7, 0, 0, 7, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 7, 0, 0, 0, 2, 2, 2, 2,},
    {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 1, 7, 7, 1, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 2, 2, 2, 2,},
    {0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 2, 2, 2, 2,},
    {0, 0, 1, 1, 1, 0, 6, 0, 0, 0, 1, 1, 1, 0, 0, 0, 2, 2, 1, 1, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2,},
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 2, 2, 1, 1, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2,},
    {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2,},
    {2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 2, 2, 1, 1, 2, 2, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 2, 2, 2, 2,},
    {2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
    {2, 2, 2, 0, 6, 0, 0, 5, 0, 0, 0, 0, 2, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 8, 9, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
    {2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
    {2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 0, 0, 5, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 8, 9, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,},
    {2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 2, 2, 0, 0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 2, 2,},
    {2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 2, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
    {2, 2, 2, 2, 2, 2, 2, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 1, 0, 0, 7, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,},
    {2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0,},
    {2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 6, 0, 0, 0,},
    {2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 7, 0, 7, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 5, 0, 0, 0, 0, 0, 2, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2,},
    {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2,},
    };

int draw(Texture2D monkey) {
    for(unsigned int row = 0; row < grid.size(); ++row) {
        for(unsigned int column = 0; column < grid[0].size(); ++ column){
            // if (outOfScreen == false) {
            if (realplayer.x >= 960 && realplayer.y >= 540 && realplayer.x <= 2640 && realplayer.y <= 3040) {
                if(grid[row][column] == 0) {
                    DrawRectangle(column * 60 - player.x, row * 60 - player.y, 60, 60, BEIGE);
                }
                if(grid[row][column] == 1) {
                    DrawRectangle(column * 60 - player.x, row * 60 - player.y, 60, 60, MAROON);
                }
                if(grid[row][column] == 2) {
                    DrawRectangle(column * 60 - player.x, row * 60 - player.y, 60, 60, GOLD);
                }
                if(grid[row][column] == 3) {

                    DrawRectangle(column * 60 - player.x, row * 60 - player.y, 60, 60, YELLOW);
                }
                if(grid[row][column] == 4) {

                    DrawRectangle(column * 60 - player.x, row * 60 - player.y, 60, 60, BLUE);
                }
                if(grid[row][column] == 5) {

                    DrawRectangle(column * 60 - player.x, row * 60 - player.y, 60, 60, GREEN);
                }
                if(grid[row][column] == 6) {

                    DrawRectangle(column * 60 - player.x, row * 60 - player.y, 60, 60, GRAY);
                }
                if(grid[row][column] == 7) {

                    DrawRectangle(column * 60 - player.x, row * 60 - player.y, 60, 60, BROWN);
                }
                if(grid[row][column] == 8) {

                    DrawRectangle(column * 60 - player.x, row * 60 - player.y, 60, 60, PURPLE);
                }
                if(grid[row][column] == 9) {

                    DrawRectangle(column * 60 - player.x, row * 60 - player.y, 60, 60, VIOLET);
                }
                DrawTexture(monkey, 960, 540, WHITE);
            }   
            else if (realplayer.x <= 960 && realplayer.y <= 540) {
                if(grid[row][column] == 0) {
                    DrawRectangle(column * 60, row * 60, 60, 60, BEIGE);
                }
                if(grid[row][column] == 1) {
                    DrawRectangle(column * 60, row * 60, 60, 60, MAROON);
                }
                if(grid[row][column] == 2) {
                    DrawRectangle(column * 60, row * 60, 60, 60, GOLD);
                }
                if(grid[row][column] == 3) {

                    DrawRectangle(column * 60, row * 60, 60, 60, YELLOW);
                }
                if(grid[row][column] == 4) {

                    DrawRectangle(column * 60, row * 60, 60, 60, BLUE);
                }
                if(grid[row][column] == 5) {

                    DrawRectangle(column * 60, row * 60, 60, 60, GREEN);
                }
                if(grid[row][column] == 6) {

                    DrawRectangle(column * 60, row * 60, 60, 60, GRAY);
                }
                if(grid[row][column] == 7) {

                    DrawRectangle(column * 60, row * 60, 60, 60, BROWN);
                }
                if(grid[row][column] == 8) {

                    DrawRectangle(column * 60, row * 60, 60, 60, PURPLE);
                }
                if(grid[row][column] == 9) {

                    DrawRectangle(column * 60, row * 60, 60, 60, VIOLET);
                }
                DrawTexture(monkey, realplayer.x, realplayer.y, WHITE);
            }            
            else if (realplayer.x >= 960 && realplayer.y <= 540 && realplayer.x <= 2640) {
                if(grid[row][column] == 0) {
                    DrawRectangle(column * 60 - player.x, row * 60, 60, 60, BEIGE);
                }
                if(grid[row][column] == 1) {
                    DrawRectangle(column * 60 - player.x, row * 60, 60, 60, MAROON);
                }
                if(grid[row][column] == 2) {
                    DrawRectangle(column * 60 - player.x, row * 60, 60, 60, GOLD);
                }
                if(grid[row][column] == 3) {

                    DrawRectangle(column * 60 - player.x, row * 60, 60, 60, YELLOW);
                }
                if(grid[row][column] == 4) {

                    DrawRectangle(column * 60 - player.x, row * 60, 60, 60, BLUE);
                }
                if(grid[row][column] == 5) {

                    DrawRectangle(column * 60 - player.x, row * 60, 60, 60, GREEN);
                }
                if(grid[row][column] == 6) {

                    DrawRectangle(column * 60 - player.x, row * 60, 60, 60, GRAY);
                }
                if(grid[row][column] == 7) {

                    DrawRectangle(column * 60 - player.x, row * 60, 60, 60, BROWN);
                }
                if(grid[row][column] == 8) {

                    DrawRectangle(column * 60 - player.x, row * 60, 60, 60, PURPLE);
                }
                if(grid[row][column] == 9) {

                    DrawRectangle(column * 60 - player.x, row * 60, 60, 60, VIOLET);
                }
                DrawTexture(monkey, 960, realplayer.y, WHITE);
            }   
            else if (realplayer.x >= 2640 && realplayer.y >= 540 && realplayer.y <= 3040) {
                if(grid[row][column] == 0) {
                    DrawRectangle(column * 60 - 960, row * 60 - player.y, 60, 60, BEIGE);
                }
                if(grid[row][column] == 1) {
                    DrawRectangle(column * 60 - 960, row * 60 - player.y, 60, 60, MAROON);
                }
                if(grid[row][column] == 2) {
                    DrawRectangle(column * 60 - 960, row * 60 - player.y, 60, 60, GOLD);
                }
                if(grid[row][column] == 3) {

                    DrawRectangle(column * 60 - 960, row * 60 - player.y, 60, 60, YELLOW);
                }
                if(grid[row][column] == 4) {

                    DrawRectangle(column * 60 - 960, row * 60 - player.y, 60, 60, BLUE);
                }
                if(grid[row][column] == 5) {

                    DrawRectangle(column * 60 - 960, row * 60 - player.y, 60, 60, GREEN);
                }
                if(grid[row][column] == 6) {

                    DrawRectangle(column * 60 - 960, row * 60 - player.y, 60, 60, GRAY);
                }
                if(grid[row][column] == 7) {

                    DrawRectangle(column * 60 - 960, row * 60 - player.y, 60, 60, BROWN);
                }
                if(grid[row][column] == 8) {

                    DrawRectangle(column * 60 - 960, row * 60 - player.y, 60, 60, PURPLE);
                }
                if(grid[row][column] == 9) {

                    DrawRectangle(column * 60 - 960, row * 60 - player.y, 60, 60, VIOLET);
                }
                DrawTexture(monkey, realplayer.x, 540, WHITE);
            }   
        }
    }
    return 0;
}
int main()
{
    // InitAudioDevice();
    InitWindow(screenWidth, screenHeight, "Monkey Game");
    SetTargetFPS(60);

    Font font = LoadFontEx("font/LilitaOne-Regular.ttf",64, 0, 0);

    Image starting_screen = LoadImage("images/startingscreen.png");
    ImageResize(&starting_screen, 1913, 1040); 
    Texture2D Tstarting_screen = LoadTextureFromImage(starting_screen);
    UnloadImage(starting_screen);

    Image mapI = LoadImage("images/map.png");
    ImageResize(&mapI, tileSize * screenSize, tileSize * screenSize); 
    Texture2D map = LoadTextureFromImage(mapI);
    UnloadImage(mapI);

    Image monkeyI = LoadImage("images/monkey.png");
    ImageResize(&monkeyI, 60, 60); 
    Texture2D monkey = LoadTextureFromImage(monkeyI);
    UnloadImage(monkeyI);


    // std::vector<std::vector<int>> grid;

    while (!WindowShouldClose()){

        BeginDrawing();

        mouse.x = GetMouseX() - mouse.width;
        mouse.y = GetMouseY() - mouse.height;

        ClearBackground(BLACK);
        if (!gameStarted) {
            // DrawTexture(Tstarting_screen, 0, 0, WHITE);   
            DrawTextEx(font, "Monkey Game", {15, 15}, 100, 2, WHITE);
        } else {
            draw(monkey);
            std::cout << realplayer.x << std::endl;
            std::cout << realplayer.y << std::endl;
            if (IsKeyDown(KEY_D)) {
                player.x += 5.0f;
                realplayer.x += 5.0f;
            }
            if (IsKeyDown(KEY_A)) {
                player.x -= 5.0f;
                realplayer.x -= 5.0f;
            }
            if (IsKeyDown(KEY_W)) {
                player.y -= 5.0f;
                realplayer.y -= 5.0f;
            }
            if (IsKeyDown(KEY_S)) {
                player.y += 5.0f;
                realplayer.y += 5.0f;
            }
            frame++;
            }
        EndDrawing();
    }
    CloseWindow();
}